{"title":"python 类学习笔记","uid":"ba06baf3033674352e99290bfc5eedc6","slug":"Python类","date":"2022-10-27T13:17:47.000Z","updated":"2022-10-27T13:24:02.036Z","comments":true,"path":"api/articles/Python类.json","keywords":null,"cover":"https://ts1.cn.mm.bing.net/th/id/R-C.8ec0de2007df3ae34076936f0ecda0e1?rik=MsJLOJxegKdRzg&riu=http%3a%2f%2fpic.kekenet.com%2f2018%2f0107%2f8121515325256.jpg&ehk=spFqSEhctd04Aet1fqfDMliq48FdnXhtkJfUW9W3uoQ%3d&risl=&pid=ImgRaw&r=0&sres=1&sresct=1","content":"<h2 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"_ _init _ _\"></a>_ _<em>init</em> _ _</h2><h5 id=\"创建class\"><a href=\"#创建class\" class=\"headerlink\" title=\"创建class\"></a>创建class</h5><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">class Dog:\n    def __init__(self,name,breed,age):\n        self.name&#x3D;name\n        self.breed&#x3D;breed\n        self.age&#x3D;age\na_dog&#x3D;Dog(&quot;abc&quot;,&quot;hound&quot;,3)\nprint(a_dog.age,a_dog.breed,a_dog.name)</code></pre>\n\n<h3 id=\"在类中定义函数\"><a href=\"#在类中定义函数\" class=\"headerlink\" title=\"在类中定义函数\"></a>在类中定义函数</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">class Dog:\n    def __init__(self,name,breed,age):\n        self.name&#x3D;name\n        self.breed&#x3D;breed\n        self.age&#x3D;age\n    def age_promote(self):\n        self.age+&#x3D;1\na_dog&#x3D;Dog(&quot;abc&quot;,&quot;hound&quot;,3)\nprint(a_dog.age,a_dog.breed,a_dog.name)\na_dog.age_promote()\nprint(a_dog.age)</code></pre>\n\n<h3 id=\"str\"><a href=\"#str\" class=\"headerlink\" title=\"_ _str _ _\"></a>_ _<em>str</em> _ _</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def __str__(self):\n    &quot;&quot;&quot;返回一个对象的描述信息&quot;&quot;&quot;\n    # print(num)\n    return &quot;名字是:%s , 年龄是:%d&quot; % (self.name, self.age)</code></pre>\n\n<h3 id=\"变长参数列表\"><a href=\"#变长参数列表\" class=\"headerlink\" title=\"变长参数列表\"></a>变长参数列表</h3><p>语法</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">def function_name(fixed_arg,*args):\n    statements</code></pre>\n\n<p>arg可以是元组或列表</p>\n<p>*的意思是变长参数列表，即参数可能不确定</p>\n<p>eg1：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">class Dog:\n    def __init__(self,name,breed,age,*arg):\n        self.name&#x3D;name\n        self.breed&#x3D;breed\n        self.age&#x3D;age\n        self.list&#x3D;arg\n    def age_promote(self):\n        self.age+&#x3D;1\n    def print_arg(self):\n        for i in self.list:\n            print(i)\na_dog&#x3D;Dog(&quot;abc&quot;,&quot;hound&quot;,3,1,2,3)\na_dog.print_arg()</code></pre>\n\n<p>输出1 2 3</p>\n<p>eg2：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">class Dog:\n    def __init__(self,name,breed,age,*arg):\n        self.name&#x3D;name\n        self.breed&#x3D;breed\n        self.age&#x3D;age\n        self.list&#x3D;arg\n    def age_promote(self):\n        self.age+&#x3D;1\n    def print_arg(self):\n        for i in self.list:\n            print(i)\na_dog&#x3D;Dog(&quot;abc&quot;,&quot;hound&quot;,3,[1,2,3])\na_dog.print_arg()</code></pre>\n\n<p>输出[1,2,3]</p>\n<p>eg3：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">class Dog:\n    def __init__(self,name,breed,age,*arg):\n        self.name&#x3D;name\n        self.breed&#x3D;breed\n        self.age&#x3D;age\n        self.list&#x3D;arg\n    def age_promote(self):\n        self.age+&#x3D;1\n    def print_arg(self):\n        for i in self.list:\n            print(i)\na_dog&#x3D;Dog(&quot;abc&quot;,&quot;hound&quot;,3,*[1,2,3])\na_dog.print_arg()</code></pre>\n\n<p>输出1 2 3（同eg1）</p>\n<h3 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h3><p>一个类继承另一个类时，继承者是子类，被继承者是父类</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">class class_name(base_class):\n    class_definition</code></pre>\n\n<p>eg1:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">class Dog:\n    def __init__(self,name,breed,age,*arg):\n        self.name&#x3D;name\n        self.breed&#x3D;breed\n        self.age&#x3D;age\n        self.list&#x3D;arg\n    def age_promote(self):\n        self.age+&#x3D;1\n    def print_arg(self):\n        for i in self.list:\n            print(i)\nclass cat(Dog):\n    def play(self):\n        s&#x3D;&#39;&#39;\n        while not s or s[0] in &#39;Nn&#39;:\n            print(self.name,&#39;fetches the balls!&#39;)\n            s&#x3D;input(&#39;wanna play again？(Y&#x2F;N)&#39;)\nclass puppy(cat):\n    def __init__(self,name,breed,age,sitdown):\n        cat.__init__(self,name,breed,age)\n        self.sitdown&#x3D;0\n    def sit(self):\n        if (self.sitdown&#x3D;&#x3D;0):\n            print(&quot;I am sitting down!&quot;)\n            self.sitdown&#x3D;1\n        else:\n            print(&quot;i am stand up&quot;)\n            self.sitdown&#x3D;0\na_dog&#x3D;Dog(&quot;abc&quot;,&quot;hound&quot;,3,*[1,2,3])\na_dog.print_arg()\npu&#x3D;puppy(&quot;abc&quot;,&quot;hound&quot;,3,0)\npu.sit()\npu.sit()\na_cat&#x3D;cat(&quot;abc&quot;,&quot;hound&quot;,3,*[1,2,3])\na_cat.play()</code></pre>\n\n<p>cat 和puppy就是dog的子类</p>\n<p>在python中都有子类自动继承超类的方法，继承可以是直接的也可以是间接的，在这里puppy直接继承了cat类的所有方法，还继承了祖父类dog的所有属性</p>\n<p>子类继承了父类的所有方法，其中包括__init__ ，因此不是在所有时候都要重新编写__init__方法</p>\n<p>但也可以像上面puppy类这么写</p>\n<h3 id=\"类变量和类方法\"><a href=\"#类变量和类方法\" class=\"headerlink\" title=\"类变量和类方法\"></a>类变量和类方法</h3><p>类变量是由同一个类的所有成员共享的变量</p>\n<p>eg1:</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">class Dog:\n    num_dogs&#x3D;0;\n    def __init__(self,name,breed,age):\n        self.name&#x3D;name\n        self.breed&#x3D;breed\n        self.age&#x3D;age\n        Dog.num_dogs+&#x3D;1\na_dog&#x3D;Dog(&quot;first_dog&quot;,&#39;ww&#39;,3)\nprint(&quot;dog_num: &quot;,Dog.num_dogs)\nanother_dog&#x3D;Dog(&quot;second_dog&quot;,&quot;ee&quot;,3)\nprint(&quot;Now_dog_num :&quot;,Dog.num_dogs)</code></pre>\n\n<p>输出</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">dog_num:  1\nNow_dog_num : 2</code></pre>\n\n<h4 id=\"实例变量\"><a href=\"#实例变量\" class=\"headerlink\" title=\"实例变量\"></a>实例变量</h4><p>在类的声明中，属性是用变量来表示的。这种变量就称为实例变量，是在类声明的内部但是在类的其他成员方法之外声明的</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">class Address:\n    detail &#x3D; &quot;guangzhou&quot;\n    post_code &#x3D; &quot;510660&quot;\n    def info(self):\n        #尝试直接访问类变量\n        #print(detail) #报错\n\n        #通过类类访问类变量\n        print(Address.detail)\n        print(Address.post_code)\n\n#通过类来访问Address 类的类变量\nprint(Address.detail)\naddr &#x3D; Address()\naddr.info()\n#修改Address类的类变量\nAddress.detail &#x3D; &quot;fushan&quot;\n\nAddress.post_code &#x3D; &quot;460110&quot;\naddr.info()</code></pre>\n\n","text":"_ _init _ _创建classclass Dog: def __init__(self,name,breed,age): self.name&#x3D;name self.breed&#x3D;breed self.age&#x3D;age a_dog&#x3D;Dog(&...","link":"","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#init\"><span class=\"toc-text\">_ _init _ _</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E5%88%9B%E5%BB%BAclass\"><span class=\"toc-text\">创建class</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9C%A8%E7%B1%BB%E4%B8%AD%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">在类中定义函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#str\"><span class=\"toc-text\">_ _str _ _</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%98%E9%95%BF%E5%8F%82%E6%95%B0%E5%88%97%E8%A1%A8\"><span class=\"toc-text\">变长参数列表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">继承</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%B1%BB%E5%8F%98%E9%87%8F%E5%92%8C%E7%B1%BB%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">类变量和类方法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E4%BE%8B%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">实例变量</span></a></li></ol></li></ol></li></ol>","author":{"name":"Shockley","slug":"blog-author","avatar":"https://s1.ax1x.com/2022/10/27/xhKxMQ.jpg","link":"https://www.cnblogs.com/rock3t/","description":"来自SZTU的一名学生，CS专业，博客会发一些本人的学习笔记和记录生活的小文章。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"sort 算法","uid":"bd2189ae81127890cb8b79118f0d3213","slug":"sort","date":"2022-10-28T02:38:18.000Z","updated":"2022-10-30T17:01:05.146Z","comments":true,"path":"api/articles/sort.json","keywords":null,"cover":"https://soj.csgrandeur.cn/static/image/global/badge.png","text":"Swap交换函数void swap(int &amp;a,int &amp;b) &#123; int temp&#x3D;a; a&#x3D;b; b&#x3D;temp; &#125; void swap(int &amp;a,int &amp;b) 为什么要加&amp;符号...","link":"","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"ACM新手课堂练习","slug":"ACM新手课堂练习","count":2,"path":"api/tags/ACM新手课堂练习.json"}],"author":{"name":"Shockley","slug":"blog-author","avatar":"https://s1.ax1x.com/2022/10/27/xhKxMQ.jpg","link":"https://www.cnblogs.com/rock3t/","description":"来自SZTU的一名学生，CS专业，博客会发一些本人的学习笔记和记录生活的小文章。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"数组学习","uid":"61e647d1d27f6d8af1fd2619625e8201","slug":"数组学习","date":"2022-10-27T13:17:47.000Z","updated":"2022-10-27T13:24:25.731Z","comments":true,"path":"api/articles/数组学习.json","keywords":null,"cover":null,"text":"创建一维vectorvector&lt;int&gt; nums;&#x2F;&#x2F;不指定长度 vector&lt;int&gt; nums(n); &#x2F;&#x2F; 指定长度为n 添加元素nums.push_back(1);&#x2F;&#x2F;直接从数组末端添...","link":"","photos":[],"count_time":{"symbolsCount":490,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Shockley","slug":"blog-author","avatar":"https://s1.ax1x.com/2022/10/27/xhKxMQ.jpg","link":"https://www.cnblogs.com/rock3t/","description":"来自SZTU的一名学生，CS专业，博客会发一些本人的学习笔记和记录生活的小文章。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}