{"title":"uart学习","uid":"f4b64ea2c88bb417cb737aa4fba9997c","slug":"uart学习","date":"2022-10-28T07:49:26.000Z","updated":"2022-10-29T03:29:17.047Z","comments":true,"path":"api/articles/uart学习.json","keywords":null,"cover":"https://rm-static.djicdn.com/robomasters/dps/0e5aa183673ec1058912fc5caed4d82b.jpg","content":"<h1 id=\"串口简介（Universal-Synchronous-x2F-Asynchronous-Receiver-x2F-Transmitter）\"><a href=\"#串口简介（Universal-Synchronous-x2F-Asynchronous-Receiver-x2F-Transmitter）\" class=\"headerlink\" title=\"串口简介（Universal Synchronous&#x2F;Asynchronous Receiver&#x2F;Transmitter）\"></a>串口简介（Universal Synchronous&#x2F;Asynchronous Receiver&#x2F;Transmitter）</h1><ul>\n<li><p>通用异步收发传输器（没有时钟线），相对地，有时钟线就是同步通信</p>\n</li>\n<li><p>具有TX和RX两根线</p>\n</li>\n<li><p>可以将数据串行地发送给对方</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>串口数据按照位依次发送，同时只有一条信号线用于发送</p>\n<p>大多数协议都是串行的</p></blockquote>\n</li>\n<li><p>波特率：每秒钟串口发送的位速率</p>\n</li>\n<li><p>常用115200，就是11.25kb&#x2F;s</p>\n</li>\n<li><p>TX接RX，RX接TX</p>\n</li>\n<li><p>可以同时发送和接收（全双工）</p>\n</li>\n<li><p>一个数据包由起始位，结束位，数据位，校验位组成</p>\n</li>\n<li><p>发送每一位的时长由波特率决定，停止位可以是一到两个时钟</p>\n</li>\n<li><p>串口空闲时保持高电平</p>\n</li>\n<li><p>数据位可以是5到九位，最低位LSB先发送，最高位MSB后发送</p>\n</li>\n</ul>\n<h1 id=\"USART-通信协议\"><a href=\"#USART-通信协议\" class=\"headerlink\" title=\"USART 通信协议\"></a>USART 通信协议</h1><p><img src=\"https://img2018.cnblogs.com/blog/1545553/201905/1545553-20190503191826863-1694313472.png\"></p>\n<ul>\n<li>起始位：当未有数据发送时，数据线处于逻辑“1”状态；先发出一个逻辑“0”信号，表示开始传输字 符。</li>\n<li>数据位：紧接着起始位之后。数据位的个数可以是4、5、6、7、8等，构成一个字符。通常采用 ASCII码。从最低位开始传送，靠时钟定位。</li>\n<li>奇偶校验位：数据为加上这一位后，使得“1”的位数应为偶数（偶校验）或奇数（奇校验），以此 来校验资料传送的正确性。</li>\n<li>停止位：它是一个字符数据的结束标志。可以是1位、1.5位、2位的高电平。 由于数据是在传输线 上定时的，并且每一个设备有其自己的时钟，很可能在通信中两台设备间出现了小小的不同步。因 此停止位不仅仅是表示传输的结束，并且提供计算机校正时钟同步的机会。适用于停止位的位数越 多，不同时钟同步的容忍程度越大，但是数据传输率同时也越慢。</li>\n<li>空闲位或起始位：处于逻辑“1”状态，表示当前线路上没有资料传送，进入空闲状态。处于逻辑“0” 状态，表示开始传送下一数据段。</li>\n</ul>\n<h1 id=\"STM32串口工作原理\"><a href=\"#STM32串口工作原理\" class=\"headerlink\" title=\"STM32串口工作原理\"></a>STM32串口工作原理</h1><h3 id=\"发送\"><a href=\"#发送\" class=\"headerlink\" title=\"发送\"></a>发送</h3><p>数据被写入串口外设，然后按照波特率依次发送数据并添加起始位和停止位</p>\n<h3 id=\"接收\"><a href=\"#接收\" class=\"headerlink\" title=\"接收\"></a>接收</h3><p>串口外设可配置位以波特率的8倍或16倍的频率采样RX引脚上的电瓶，然后自动分析提取</p>\n<h2 id=\"串口外设中断\"><a href=\"#串口外设中断\" class=\"headerlink\" title=\"串口外设中断\"></a>串口外设中断</h2><ul>\n<li><p>FIFO 溢出错误</p>\n</li>\n<li><p>线中止错误（line-break，即Rx 信号一直为0 的状态，包括校验位和停止位在内）</p>\n</li>\n<li><p>奇偶校验错误</p>\n</li>\n<li><p>帧错误（停止位不为1）</p>\n</li>\n<li><p>接收超时（接收FIFO 已有数据但未满，而后续数据长时间不来）</p>\n</li>\n<li><p>发送</p>\n</li>\n<li><p>接收</p>\n</li>\n</ul>\n<h1 id=\"实验部分\"><a href=\"#实验部分\" class=\"headerlink\" title=\"实验部分\"></a>实验部分</h1><p>本实验主要完成通过按键触发中断从串口一发送然后串口六接受</p>\n<h3 id=\"预备知识（USART-API）\"><a href=\"#预备知识（USART-API）\" class=\"headerlink\" title=\"预备知识（USART API）\"></a>预备知识（USART API）</h3><h4 id=\"接收-1\"><a href=\"#接收-1\" class=\"headerlink\" title=\"接收\"></a>接收</h4><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">&#x2F;**\n* @brief Receives an amount of data in blocking mode.\n* @note When UART parity is not enabled (PCE &#x3D; 0), and Word Length is\nconfigured to 9 bits (M1-M0 &#x3D; 01),\n* the received data is handled as a set of u16. In this case, Size\nmust indicate the number\n* of u16 available through pData.\n* @param huart Pointer to a UART_HandleTypeDef structure that contains\n* the configuration information for the specified UART module.\n* @param pData Pointer to data buffer (u8 or u16 data elements).\n* @param Size Amount of data elements (u8 or u16) to be received.\n* @param Timeout Timeout duration\n* @retval HAL status\n*&#x2F;\nHAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData,\nuint16_t Size, uint32_t Timeout)</code></pre>\n\n<p>阻塞式接受，等到直到超时</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">&#x2F;**\n* @brief Receives an amount of data in non blocking mode.\n* @note When UART parity is not enabled (PCE &#x3D; 0), and Word Length is\nconfigured to 9 bits (M1-M0 &#x3D; 01),\n* the received data is handled as a set of u16. In this case, Size\nmust indicate the number\n* of u16 available through pData.\n* @param huart Pointer to a UART_HandleTypeDef structure that contains\n* the configuration information for the specified UART module.\n* @param pData Pointer to data buffer (u8 or u16 data elements).\n* @param Size Amount of data elements (u8 or u16) to be received.\n* @retval HAL status\n*&#x2F;\nHAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)</code></pre>\n\n<p>中断式接受</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">&#x2F;**\n* @brief Receives an amount of data in DMA mode.\n* @note When UART parity is not enabled (PCE &#x3D; 0), and Word Length is\nconfigured to 9 bits (M1-M0 &#x3D; 01),\n* the received data is handled as a set of u16. In this case, Size\nmust indicate the number\n* of u16 available through pData.\n* @param huart Pointer to a UART_HandleTypeDef structure that contains\n* the configuration information for the specified UART module.\n* @param pData Pointer to data buffer (u8 or u16 data elements).\n* @param Size Amount of data elements (u8 or u16) to be received.\n* @note When the UART parity is enabled (PCE &#x3D; 1) the received data contains\nthe parity bit.\n* @retval HAL status\n*&#x2F;\nHAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t* pData, uint16_t Size)</code></pre>\n\n<p>使用DMA中断进行接收</p>\n<h4 id=\"发送-1\"><a href=\"#发送-1\" class=\"headerlink\" title=\"发送\"></a>发送</h4><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">&#x2F;**\n* @brief Sends an amount of data in blocking mode.\n* @note When UART parity is not enabled (PCE &#x3D; 0), and Word Length is\nconfigured to 9 bits (M1-M0 &#x3D; 01),\n* the sent data is handled as a set of u16. In this case, Size must\nindicate the number\n* of u16 provided through pData.\n* @param huart Pointer to a UART_HandleTypeDef structure that contains\n* the configuration information for the specified UART module.\n* @param pData Pointer to data buffer (u8 or u16 data elements).\n* @param Size Amount of data elements (u8 or u16) to be sent\n* @param Timeout Timeout duration\n* @retval HAL status\n*&#x2F;\nHAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData,\nuint16_t Size, uint32_t Timeout)\n</code></pre>\n\n\n\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">&#x2F;**\n* @brief Sends an amount of data in non blocking mode.\n* @note When UART parity is not enabled (PCE &#x3D; 0), and Word Length is\nconfigured to 9 bits (M1-M0 &#x3D; 01),\n* the sent data is handled as a set of u16. In this case, Size must\nindicate the number\n* of u16 provided through pData.\n* @param huart Pointer to a UART_HandleTypeDef structure that contains\n* the configuration information for the specified UART module.\n* @param pData Pointer to data buffer (u8 or u16 data elements).\n* @param Size Amount of data elements (u8 or u16) to be sent\n* @retval HAL status\n*&#x2F;\nHAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t\n*pData, uint16_t Size)</code></pre>\n\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">&#x2F;**\n* @brief Sends an amount of data in DMA mode.\n* @note When UART parity is not enabled (PCE &#x3D; 0), and Word Length is\nconfigured to 9 bits (M1-M0 &#x3D; 01),\n* the sent data is handled as a set of u16. In this case, Size must\nindicate the number\n* of u16 provided through pData.\n* @param huart Pointer to a UART_HandleTypeDef structure that contains\n* the configuration information for the specified UART module.\n* @param pData Pointer to data buffer (u8 or u16 data elements).\n* @param Size Amount of data elements (u8 or u16) to be sent\n* @retval HAL status\n*&#x2F;\nHAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t\n*pData, uint16_t Size)\n</code></pre>\n\n<h3 id=\"中断\"><a href=\"#中断\" class=\"headerlink\" title=\"中断\"></a>中断</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart);\nvoid HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart);\n</code></pre>\n\n<h3 id=\"我写的\"><a href=\"#我写的\" class=\"headerlink\" title=\"我写的\"></a>我写的</h3><h5 id=\"首先使能串口接收\"><a href=\"#首先使能串口接收\" class=\"headerlink\" title=\"首先使能串口接收\"></a>首先使能串口接收</h5><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">HAL_UART_Receive_IT(&amp;huart6,rxDatabuffer,sizeof(rxDatabuffer)); &#x2F;&#x2F; 触发接受后，hal库会一只去等，直到他接受到这个数据，然后进入中断回调函数</code></pre>\n\n<h5 id=\"然后编写按键中断\"><a href=\"#然后编写按键中断\" class=\"headerlink\" title=\"然后编写按键中断\"></a>然后编写按键中断</h5><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">&#x2F;&#x2F;按键中断\nvoid HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)\n&#123;\n    if(GPIO_Pin &#x3D;&#x3D; GPIO_PIN_0)\n    &#123;\n        uint32_t temp&#x3D;HAL_GetTick();\n\n        *((uint32_t *)txDatabuffer)&#x3D;temp; &#x2F;&#x2F;强制类型转换，把强制转换位uint32位的指针，前面再加一个*进行。。\n        while(huart1.gState !&#x3D;HAL_UART_STATE_READY);&#x2F;&#x2F; 防止还没发送完成串口被占用的时候继续发送数据\n        HAL_UART_Transmit_IT(&amp;huart1,txDatabuffer,sizeof(txDatabuffer)); &#x2F;&#x2F;串口的发送\n\n    &#125;\n&#125;</code></pre>\n\n<h5 id=\"接着编写串口接受完成中断\"><a href=\"#接着编写串口接受完成中断\" class=\"headerlink\" title=\"接着编写串口接受完成中断\"></a>接着编写串口接受完成中断</h5><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)\n&#123;\n    HAL_GPIO_TogglePin(GPIOH,GPIO_PIN_10);\n    HAL_GPIO_TogglePin(GPIOH,GPIO_PIN_11);\n    HAL_GPIO_TogglePin(GPIOH,GPIO_PIN_12);\n    if(huart&#x3D;&#x3D;&amp;huart6)\n    &#123;\n        rxdata&#x3D;*((uint32_t*)rxDatabuffer);\n        HAL_UART_Receive_IT(&amp;huart6,rxDatabuffer,sizeof(rxDatabuffer)); &#x2F;&#x2F;因为触发中断后就会没有，所以还要再次触发一次中断函数\n    &#125;\n&#125;</code></pre>\n\n<p>值得注意的是这个指针的强制类型转换很妙</p>\n<h5 id=\"接线部分\"><a href=\"#接线部分\" class=\"headerlink\" title=\"接线部分\"></a>接线部分</h5><p><a href=\"https://imgse.com/i/x4I9ln\"><img src=\"https://s1.ax1x.com/2022/10/29/x4I9ln.jpg\" alt=\"x4I9ln.jpg\"></a></p>\n<h5 id=\"编程环境\"><a href=\"#编程环境\" class=\"headerlink\" title=\"编程环境\"></a>编程环境</h5><p>clion+cubeMX+cubemonitor</p>\n<h1 id=\"时钟树\"><a href=\"#时钟树\" class=\"headerlink\" title=\"时钟树\"></a>时钟树</h1><ul>\n<li>STM32的所有外设都是可以配置时钟的</li>\n<li>大部分外设挂载在APB总线上，它们的时钟频率等于总线频率</li>\n<li>部分外设可以单独设置时钟频率</li>\n</ul>\n<p><a href=\"https://imgse.com/i/x4hCy6\"><img src=\"https://s1.ax1x.com/2022/10/28/x4hCy6.png\" alt=\"x4hCy6.png\"></a></p>\n<p>因为只有uart1和6是挂载在APB2上的，所以他们的波特率可以设得很高，而挂载在APB1的不行</p>\n","feature":true,"text":"串口简介（Universal Synchronous&#x2F;Asynchronous Receiver&#x2F;Transmitter） 通用异步收发传输器（没有时钟线），相对地，有时钟线就是同步通信 具有TX和RX两根线 可以将数据串行地发送给对方 串口数据按照位依次发送...","link":"","photos":[],"count_time":{"symbolsCount":"6.7k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"嵌入式学习","slug":"嵌入式学习","count":2,"path":"api/tags/嵌入式学习.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%B8%B2%E5%8F%A3%E7%AE%80%E4%BB%8B%EF%BC%88Universal-Synchronous-x2F-Asynchronous-Receiver-x2F-Transmitter%EF%BC%89\"><span class=\"toc-text\">串口简介（Universal Synchronous&#x2F;Asynchronous Receiver&#x2F;Transmitter）</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#USART-%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE\"><span class=\"toc-text\">USART 通信协议</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#STM32%E4%B8%B2%E5%8F%A3%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">STM32串口工作原理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%91%E9%80%81\"><span class=\"toc-text\">发送</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E6%94%B6\"><span class=\"toc-text\">接收</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%B2%E5%8F%A3%E5%A4%96%E8%AE%BE%E4%B8%AD%E6%96%AD\"><span class=\"toc-text\">串口外设中断</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E9%AA%8C%E9%83%A8%E5%88%86\"><span class=\"toc-text\">实验部分</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A2%84%E5%A4%87%E7%9F%A5%E8%AF%86%EF%BC%88USART-API%EF%BC%89\"><span class=\"toc-text\">预备知识（USART API）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E6%94%B6-1\"><span class=\"toc-text\">接收</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%91%E9%80%81-1\"><span class=\"toc-text\">发送</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%AD%E6%96%AD\"><span class=\"toc-text\">中断</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%88%91%E5%86%99%E7%9A%84\"><span class=\"toc-text\">我写的</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E9%A6%96%E5%85%88%E4%BD%BF%E8%83%BD%E4%B8%B2%E5%8F%A3%E6%8E%A5%E6%94%B6\"><span class=\"toc-text\">首先使能串口接收</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%84%B6%E5%90%8E%E7%BC%96%E5%86%99%E6%8C%89%E9%94%AE%E4%B8%AD%E6%96%AD\"><span class=\"toc-text\">然后编写按键中断</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E7%9D%80%E7%BC%96%E5%86%99%E4%B8%B2%E5%8F%A3%E6%8E%A5%E5%8F%97%E5%AE%8C%E6%88%90%E4%B8%AD%E6%96%AD\"><span class=\"toc-text\">接着编写串口接受完成中断</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E7%BA%BF%E9%83%A8%E5%88%86\"><span class=\"toc-text\">接线部分</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E7%BC%96%E7%A8%8B%E7%8E%AF%E5%A2%83\"><span class=\"toc-text\">编程环境</span></a></li></ol></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%97%B6%E9%92%9F%E6%A0%91\"><span class=\"toc-text\">时钟树</span></a></li></ol>","author":{"name":"Shockley","slug":"blog-author","avatar":"https://s1.ax1x.com/2022/10/27/xhKxMQ.jpg","link":"https://www.cnblogs.com/rock3t/","description":"来自SZTU的一名学生，CS专业，博客会发一些本人的学习笔记和记录生活的小文章。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"排序题目","uid":"137114166de934a4dd5b894c333fbc29","slug":"排序题目","date":"2022-10-30T13:21:16.000Z","updated":"2022-10-30T17:01:20.711Z","comments":true,"path":"api/articles/排序题目.json","keywords":null,"cover":"https://soj.csgrandeur.cn/static/image/global/badge.png","text":"Description 1冒泡排序是一种常见的排序算法，本题要求用冒泡排序算法对一组正整数进行从小到大排序. 从小到大输出排序好的数，数之间用空格分开，行尾没有多余的空格. Input多组测试数据，每组数据第一行为 n 表示有n 个数。第二行为n个空格隔开的500内的正整数. 1...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"ACM新手课堂练习","slug":"ACM新手课堂练习","count":2,"path":"api/tags/ACM新手课堂练习.json"}],"author":{"name":"Shockley","slug":"blog-author","avatar":"https://s1.ax1x.com/2022/10/27/xhKxMQ.jpg","link":"https://www.cnblogs.com/rock3t/","description":"来自SZTU的一名学生，CS专业，博客会发一些本人的学习笔记和记录生活的小文章。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"sort 算法","uid":"bd2189ae81127890cb8b79118f0d3213","slug":"sort","date":"2022-10-28T02:38:18.000Z","updated":"2022-10-30T17:01:05.146Z","comments":true,"path":"api/articles/sort.json","keywords":null,"cover":"https://soj.csgrandeur.cn/static/image/global/badge.png","text":"Swap交换函数void swap(int &amp;a,int &amp;b) &#123; int temp&#x3D;a; a&#x3D;b; b&#x3D;temp; &#125; void swap(int &amp;a,int &amp;b) 为什么要加&amp;符号...","link":"","photos":[],"count_time":{"symbolsCount":"4.2k","symbolsTime":"4 mins."},"categories":[],"tags":[{"name":"ACM新手课堂练习","slug":"ACM新手课堂练习","count":2,"path":"api/tags/ACM新手课堂练习.json"}],"author":{"name":"Shockley","slug":"blog-author","avatar":"https://s1.ax1x.com/2022/10/27/xhKxMQ.jpg","link":"https://www.cnblogs.com/rock3t/","description":"来自SZTU的一名学生，CS专业，博客会发一些本人的学习笔记和记录生活的小文章。","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}