{"title":"结构体 共用体","uid":"bf4eea2954747cade91d710bb8265d76","slug":"结构体 共用体 位操作和枚举类型","date":"2022-10-27T13:17:47.000Z","updated":"2022-10-27T13:25:01.521Z","comments":true,"path":"api/articles/结构体 共用体 位操作和枚举类型.json","keywords":null,"cover":[],"content":"<p><strong>typedef</strong> 用于创建已定义的数据类型的别名</p>\n<p><strong>共用体</strong> 与结构体类似，但是其中的成员公用一个储存空间</p>\n<p><strong>位运算符</strong> 用于处理整数中的数位</p>\n<p><strong>位域</strong> 结构体的整形或无符号型成员变量，实现数据的压缩存储</p>\n<p><strong>枚举</strong> 用标识符表示的一组整形变量</p>\n<h3 id=\"结构体（aggregate）\"><a href=\"#结构体（aggregate）\" class=\"headerlink\" title=\"结构体（aggregate）\"></a>结构体（aggregate）</h3><p>结构体可以包含不同数据类型的变量，将指针与结构体联合使用，可以实现更复杂的数据结构，如：链表，队列，堆栈和树</p>\n<p>for example</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">struct employee&#123;\n\tchar firstname[20];\n\tchar lastname[20];\n\tunsigned int age;\n\tchar gender;\n\tdouble hourlySaraly;\n&#125;;</code></pre>\n\n<h4 id=\"结构体的定义\"><a href=\"#结构体的定义\" class=\"headerlink\" title=\"结构体的定义\"></a>结构体的定义</h4><p><strong>关键字</strong> struct</p>\n<h4 id=\"结构体的自引用\"><a href=\"#结构体的自引用\" class=\"headerlink\" title=\"结构体的自引用\"></a>结构体的自引用</h4><p>结构体不能包含他的自身类型，但是指向同一个结构体的指针却可以出现在结构体的定义中</p>\n<p>称为自引用结构体，可构成链式结构</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">struct employee2&#123;\n\tchar firstname[20];\n\tchar lastname[20];\n\tunsigned int age;\n\tchar gender;\n\tdouble hourlySaraly;\n&#x2F;&#x2F;\tstruct employee2 teamleader; error\n\tstruct employee2 *teamleader; &#x2F;&#x2F;pointer\n&#125;;</code></pre>\n\n<h4 id=\"定义结构体的类型变量\"><a href=\"#定义结构体的类型变量\" class=\"headerlink\" title=\"定义结构体的类型变量\"></a>定义结构体的类型变量</h4><p>结构体的定义并不占用内存中的任何空间，它只是创建了一种新的可以用来定义变量的数据类型。</p>\n<p>下面是定义结构体变量的两种方式</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">struct card&#123;\n\tchar *face;\n\tchar *suit;\n&#125;;\nstruct card aCard ,deck[52],*cardPtr;</code></pre>\n\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">struct card&#123;\n\tchar *face;\n\tchar *suit;\n&#125;aCard ,deck[52],*cardPtr;</code></pre>\n\n<p>执行完上面语句后，系统才为一个类型为struct card 的变量申请aCard、数组deck中的52个struct card和一个未初始化的指向struct card 类型的指针申请空间</p>\n<h4 id=\"结构体标记名\"><a href=\"#结构体标记名\" class=\"headerlink\" title=\"结构体标记名\"></a>结构体标记名</h4><p>结构体标记名可以省略，但是省略时，结构体类型变量的声明就只能和结构体定义同时进行</p>\n<h4 id=\"结构体初始化\"><a href=\"#结构体初始化\" class=\"headerlink\" title=\"结构体初始化\"></a>结构体初始化</h4><p>与数组一样，可以采用初始值列表来初始化结构体</p>\n<p>Structures can be initialized using initializer lists as with arrays. To initialize a structure, follow the variable name in the definition with an equals sign and a brace-enclosed, comma-separated list of initializers. For example, the declaration.</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">struct card aCard &#x3D; &#123; &quot;Three&quot;, &quot;Hearts&quot; &#125;;</code></pre>\n\n<h4 id=\"用-和-gt-访问结构体成员\"><a href=\"#用-和-gt-访问结构体成员\" class=\"headerlink\" title=\"用.和 -&gt;访问结构体成员\"></a>用.和 -&gt;访问结构体成员</h4><p>有两种运算符来访问结构体的成员：</p>\n<p><strong>结构体成员运算符</strong>  structure member operator   ( . )</p>\n<p><strong>结构体指针运算符</strong> structure pointer operator -&gt;</p>\n<p>例如：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">printf(&quot;%s&quot;, aCard.suit); &#x2F;&#x2F; displays Hearts</code></pre>\n\n<p>假设cardPtr是struct card类型的指针并且指向acard</p>\n<p>则有：</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">printf(&quot;%s&quot;, cardPtr-&gt;suit); &#x2F;&#x2F; displays Hearts</code></pre>\n\n<p><strong>attention</strong> :The expression <strong>cardPtr-&gt;suit</strong> is equivalent to **(<em>cardPtr).suit</em>*</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">aCard.face&#x3D;&quot;ACE&quot;;\naCard.suit&#x3D;&quot;Spades&quot;;\ncardPtr&#x3D;&amp;aCard;\nprintf(&quot;%s%s%s&quot;,aCard.face,cardPtr-&gt;face,(*cardPtr).face);</code></pre>\n\n<h3 id=\"在函数中使用结构体\"><a href=\"#在函数中使用结构体\" class=\"headerlink\" title=\"在函数中使用结构体\"></a>在函数中使用结构体</h3><ul>\n<li><p>传递结构体的个别成员</p>\n<p>When structures or individual structure members are passed to a function, they’re passed by <strong>value</strong>. Therefore, the members of a caller’s structure <strong>cannot be modified</strong> by the called function</p>\n</li>\n<li><p>传递整个结构体</p>\n</li>\n<li><p>传递指向结构体的指针</p>\n</li>\n</ul>\n<h3 id=\"typedef-的使用\"><a href=\"#typedef-的使用\" class=\"headerlink\" title=\"typedef 的使用\"></a>typedef 的使用</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">typedef struct card Card;</code></pre>\n\n<p><strong>Card</strong> can now be used to declare variables of type struct card. The declaration</p>\n<p><code>Card deck[52];</code></p>\n<p>declares an array of 52 Card structures.</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Creating a new name with typedef does not create a new type;typedef simply creates a new type name, which may be used as an alias for an existing type name.</p></blockquote>\n<h3 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h3><p><img src=\"C:\\Users\\Shockley\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221020113122985.png\" alt=\"image-20221020113122985\"></p>\n","text":"typedef 用于创建已定义的数据类型的别名 共用体 与结构体类似，但是其中的成员公用一个储存空间 位运算符 用于处理整数中的数位 位域 结构体的整形或无符号型成员变量，实现数据的压缩存储 枚举 用标识符表示的一组整形变量 结构体（aggregate）结构体可以包含不同数据类型...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[],"tags":[],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%93%E6%9E%84%E4%BD%93%EF%BC%88aggregate%EF%BC%89\"><span class=\"toc-text\">结构体（aggregate）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BB%93%E6%9E%84%E4%BD%93%E7%9A%84%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">结构体的定义</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BB%93%E6%9E%84%E4%BD%93%E7%9A%84%E8%87%AA%E5%BC%95%E7%94%A8\"><span class=\"toc-text\">结构体的自引用</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89%E7%BB%93%E6%9E%84%E4%BD%93%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">定义结构体的类型变量</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BB%93%E6%9E%84%E4%BD%93%E6%A0%87%E8%AE%B0%E5%90%8D\"><span class=\"toc-text\">结构体标记名</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BB%93%E6%9E%84%E4%BD%93%E5%88%9D%E5%A7%8B%E5%8C%96\"><span class=\"toc-text\">结构体初始化</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%94%A8-%E5%92%8C-gt-%E8%AE%BF%E9%97%AE%E7%BB%93%E6%9E%84%E4%BD%93%E6%88%90%E5%91%98\"><span class=\"toc-text\">用.和 -&gt;访问结构体成员</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9C%A8%E5%87%BD%E6%95%B0%E4%B8%AD%E4%BD%BF%E7%94%A8%E7%BB%93%E6%9E%84%E4%BD%93\"><span class=\"toc-text\">在函数中使用结构体</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#typedef-%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">typedef 的使用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">位运算符</span></a></li></ol>","author":{"name":"Shockley","slug":"blog-author","avatar":"https://s1.ax1x.com/2022/10/27/xhKxMQ.jpg","link":"https://www.cnblogs.com/rock3t/","description":"菜鸟一枚，会发一些记录生活和学习笔记的小文章","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"数组学习","uid":"61e647d1d27f6d8af1fd2619625e8201","slug":"数组学习","date":"2022-10-27T13:17:47.000Z","updated":"2022-10-27T13:24:25.731Z","comments":true,"path":"api/articles/数组学习.json","keywords":null,"cover":null,"text":"创建一维vectorvector&lt;int&gt; nums;&#x2F;&#x2F;不指定长度 vector&lt;int&gt; nums(n); &#x2F;&#x2F; 指定长度为n 添加元素nums.push_back(1);&#x2F;&#x2F;直接从数组末端添...","link":"","photos":[],"count_time":{"symbolsCount":490,"symbolsTime":"1 mins."},"categories":[],"tags":[],"author":{"name":"Shockley","slug":"blog-author","avatar":"https://s1.ax1x.com/2022/10/27/xhKxMQ.jpg","link":"https://www.cnblogs.com/rock3t/","description":"菜鸟一枚，会发一些记录生活和学习笔记的小文章","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{}}