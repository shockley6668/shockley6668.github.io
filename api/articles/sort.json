{"title":"sort","uid":"11e9f0c21fa0f1c7fb279b1639cd4ab1","slug":"sort","date":"2022-10-28T02:38:18.000Z","updated":"2022-10-28T16:27:37.995Z","comments":true,"path":"api/articles/sort.json","keywords":null,"cover":[],"content":"<h2 id=\"Swap交换函数\"><a href=\"#Swap交换函数\" class=\"headerlink\" title=\"Swap交换函数\"></a>Swap交换函数</h2><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">void swap(int &amp;a,int &amp;b)\n&#123;\n\tint temp&#x3D;a;\n\ta&#x3D;b;\n\tb&#x3D;temp;\n&#125;</code></pre>\n\n<p>void swap(int &amp;a,int &amp;b) 为什么要加&amp;符号？？</p>\n<p>参数里的&amp;表示引用型参数，在一般的参数传递的时候，形参是实参的副本，也就是说形参和实参在内存中的位置不同，用了引用型参数后，形参和实参在内存中的位置是一样的。**&amp; 这里表示引用，说明需要传递变量给这个函数，函数中可以对参数的值进行修改<br>如果没有 &amp;，修改的就是函数体中的临时变量。**</p>\n<h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">void bubble_sort(int* arr,int len)\n&#123;\n\tfor(int i&#x3D;0;i&lt;len-1;i++)\n\t&#123;\n\t\tfor(int k&#x3D;0;k&lt;len-1-i;k++)\n\t\t&#123;\n\t\t\tif(arr[k]&gt;arr[k+1]) &#x2F;&#x2F;表示从小到大排\n\t\t\t&#123;\n\t\t\t\tswap(arr[k],arr[k+1]);\n\t\t\t&#125;\n\t\t&#125;\n\t&#125;\n&#125;</code></pre>\n\n<p>冒泡排序的时间复杂度为O（n^2）</p>\n<h2 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h2><p>insertion sort 每次从未排序中取出一个元素插入到已排序序列中，不断重复直至所有元素均被移到排序序列</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Pannta/img-store/img/20221007170523.svg\"></p>\n<p><img src=\"https://www.runoob.com/wp-content/uploads/2019/03/insertionSort.gif\"></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">void insertion_sort (int arr[], int len)\n&#123;\n\tint j,key;\n\tfor(int i&#x3D;1;i&lt;len;i++)\n\t&#123;\n\t\tkey&#x3D;arr[i];\n\t\tj&#x3D;i-1;\n\t\twhile(j&gt;&#x3D;0 &amp;&amp; (arr[j]&gt;key))\n\t\t&#123;\n\t\t\tarr[j+1]&#x3D;arr[j]; &#x2F;&#x2F;移位，留出插入空格\n\t\t\tj--;\n\t\t&#125;\n\t\tarr[j+1]&#x3D;key; &#x2F;&#x2F;把新元素插入到空格中，+1是因为*\n\t&#125;\n&#125;</code></pre>\n\n<ul>\n<li>while中j要大于0原因是处理临界条件，如果key比较到第一个都不比它大的话就要插在第一个前面了，第一个移到后面</li>\n<li>arr[j+1]是因为如果当j&#x3D;0时进入循环j就等于-1，然后最后赋值要把j加一才行</li>\n<li>第一层for循环是为了选择要插入的数</li>\n<li>第二层while是为了判断插入到哪里，并且移位</li>\n</ul>\n<h2 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h2><p>归并排序（Merge sort）是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。</p>\n<p>作为一种典型的分而治之思想的算法应用，归并排序的实现由两种方法：</p>\n<ul>\n<li>自上而下的递归（所有递归的方法都可以用迭代重写，所以就有了第 2 种方法）；</li>\n<li>自下而上的迭代；</li>\n</ul>\n<h4 id=\"算法步骤\"><a href=\"#算法步骤\" class=\"headerlink\" title=\"算法步骤\"></a>算法步骤</h4><ol>\n<li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列；</li>\n<li>设定两个指针，最初位置分别为两个已经排序序列的起始位置；</li>\n<li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置；</li>\n<li>重复步骤 3 直到某一指针达到序列尾；</li>\n<li>将另一序列剩下的所有元素直接复制到合并序列尾。</li>\n</ol>\n","feature":true,"text":"Swap交换函数void swap(int &amp;a,int &amp;b) &#123; int temp&#x3D;a; a&#x3D;b; b&#x3D;temp; &#125; void swap(int &amp;a,int &amp;b) 为什么要加&amp;符号...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"ACM新手课堂练习","slug":"ACM新手课堂练习","count":1,"path":"api/tags/ACM新手课堂练习.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Swap%E4%BA%A4%E6%8D%A2%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">Swap交换函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">冒泡排序</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">插入排序</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">归并排序</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E6%AD%A5%E9%AA%A4\"><span class=\"toc-text\">算法步骤</span></a></li></ol></li></ol></li></ol>","author":{"name":"Shockley","slug":"blog-author","avatar":"https://s1.ax1x.com/2022/10/27/xhKxMQ.jpg","link":"/","description":"菜鸟一枚","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"usrt学习","uid":"1c32b2d58befd501a2000f79390616a5","slug":"usrt学习","date":"2022-10-28T07:49:26.000Z","updated":"2022-10-28T16:30:17.828Z","comments":true,"path":"api/articles/usrt学习.json","keywords":null,"cover":"https://rm-static.djicdn.com/robomasters/dps/0e5aa183673ec1058912fc5caed4d82b.jpg","text":"串口简介（Universal Synchronous&#x2F;Asynchronous Receiver&#x2F;Transmitter） 通用异步收发传输器（没有时钟线），相对地，有时钟线就是同步通信 具有TX和RX两根线 可以将数据串行地发送给对方 串口数据按照位依次发送...","link":"","photos":[],"count_time":{"symbolsCount":"6.7k","symbolsTime":"6 mins."},"categories":[],"tags":[{"name":"嵌入式学习","slug":"嵌入式学习","count":1,"path":"api/tags/嵌入式学习.json"}],"author":{"name":"Shockley","slug":"blog-author","avatar":"https://s1.ax1x.com/2022/10/27/xhKxMQ.jpg","link":"/","description":"菜鸟一枚","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"python 类学习笔记","uid":"ba06baf3033674352e99290bfc5eedc6","slug":"Python类","date":"2022-10-27T13:17:47.000Z","updated":"2022-10-27T13:24:02.036Z","comments":true,"path":"api/articles/Python类.json","keywords":null,"cover":"https://ts1.cn.mm.bing.net/th/id/R-C.8ec0de2007df3ae34076936f0ecda0e1?rik=MsJLOJxegKdRzg&riu=http%3a%2f%2fpic.kekenet.com%2f2018%2f0107%2f8121515325256.jpg&ehk=spFqSEhctd04Aet1fqfDMliq48FdnXhtkJfUW9W3uoQ%3d&risl=&pid=ImgRaw&r=0&sres=1&sresct=1","text":"_ _init _ _创建classclass Dog: def __init__(self,name,breed,age): self.name&#x3D;name self.breed&#x3D;breed self.age&#x3D;age a_dog&#x3D;Dog(&...","link":"","photos":[],"count_time":{"symbolsCount":"4.3k","symbolsTime":"4 mins."},"categories":[],"tags":[],"author":{"name":"Shockley","slug":"blog-author","avatar":"https://s1.ax1x.com/2022/10/27/xhKxMQ.jpg","link":"/","description":"菜鸟一枚","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}